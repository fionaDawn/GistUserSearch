import { createAsyncThunk, createSlice, current } from '@reduxjs/toolkit';
import { getAllForksByGistId, getGistsByUsername } from '../service/gist';

const initialState = {
    status: "idle",
    error: "",
    results: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUserGistsAsync = createAsyncThunk(
    'user/getGistsByUsername',
    async (uname) => (await getGistsByUsername(uname)).data
);

export const getAllForksByGistIdAsync = createAsyncThunk(
    'user/getAllForksByGistId',
    async (id) => (await getAllForksByGistId(id)).data
);

export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    // reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getUserGistsAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getUserGistsAsync.rejected, (state, action) => {
                state.status = action.error.message;
            })
            .addCase(getUserGistsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.results = action.payload;
            })
            .addCase(getAllForksByGistIdAsync.fulfilled, (state, action) => {
                const payloadIdx = current(state).results.findIndex(res => res.id === action.meta.arg)
                // get only the latest 3 forks
                const sortedForks = action.payload.sort((a, b) => {
                    var keyA = new Date(a.created_at),
                        keyB = new Date(b.created_at);
                    // Compare the 2 dates
                    if (keyA < keyB) return 1;
                    if (keyA > keyB) return -1;
                    return 0;
                });
                console.log(sortedForks.slice(0, 2), sortedForks)
                state.results[payloadIdx].forks = sortedForks.slice(0, 3)
            });
    },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file.
export const selectUser = (state) => {
    return state.user;
}

export default userSlice.reducer;
